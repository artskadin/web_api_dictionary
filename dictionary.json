{
    "реактивное_веб-программирование": "Парадигма программирования, ориентированная на потоки и распространение изменений.",
    "парадигма_программирования": "Набор идей и понятий, которые определяют стиль написания программ, подход к программированию",
    "императивное_программирование": "Парадигма программирования, в которой задаётся последовательность действий, необходимых для получения результата. В нём используются переменные, операторы присваивания и составные выражения.",
    "декларативное_программирование": "Парадигма программирования, в которой задается спецификация решения задачи, то есть описывается, что представляет собой проблема и ожидаемый результат, но без описания способа достижения этого результата.",
    "функциональное_программирование": "Парадигма программирования, в которой процесс вычисления предполагает обходиться вычислением результатов функций от исходных данных и результатов других функций, и не предполагает явного хранения состояния программы.",
    "объектно-ориентированное_программирование": "Парадигма программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.",
    "событийно-ориентированное_программирование": "Парадигма программирования, в которой выполнение программы определяется событиями – действиями пользователя, сообщениями других программ и потоков, событиями операционной системы.",
    "функция_высшего_порядка": "Функция, которая может принимать в качестве аргументов и возвращать другие функции.",
    "чистая_функция": "Функция, которая не имеет побочных эффектов, и результат которой всегда будет один и тот же при одних и тех же передаваемых аргументах.",
    "реактивность": "Способность нескольких сущностей быть связанными друг с другом или зависимыми друг от друга таким образом, что изменение одной сущности автоматически оказывает влияние на другие, зависимые сущности.",
    "предварительное_объявление": "Подход, при котором инициализированная переменная ссылается на неинициализированную",
    "реактивная_архитектура": "Архитектура системы, которая реализует такие принципы как отзывчивость, гибкость, отказоустойчивость и обмен сообщениями.",
    "отзывчивость": "Архитектурный принцип, подразумевающий, что приложение должно быть способно своевременно реагировать на события, даже если произошел отказ.",
    "гибкость": "Архитектурный принцип, подразумевающий, что архитектура системы должна уметь автоматически расширяться или сужаться (добавлять или удалять узлы) в зависимости от нагрузки без необходимости перепроектирования или переписывания приложения.",
    "отказоустойчивость": "Архитектурный принцип, который подразумевает, что система имеет возможность автоматически восстанавливаться и представляет собой изолированные компоненты, которые осуществляют инкапсуляцию отказов в сообщения и пересылают их другим компонентам, которые, в свою очередь, производят анализ ошибок и принимают решение как реагировать. ",
    "обмен_сообщениями": "Архитектурный принцип, акцентирующий внимание на компонентах-получателях, которые ожидают поступающих сообщений (элементов данных) и реагируют на них, в противном случае бездействуют.",
    "отказ": "Неожиданное событие, требующее вмешательства перед тем, как система вновь сможет функционировать на том же уровне.",
    "javaScript": "Интерпретируемый язык программирования, который используется для разработки как клиентской, так и серверной частей веб-приложений.",
    "наблюдатель": "Поведенческий шаблон проектирования, который создает механизм подписки, позволяющий одним объектам следить и реагировать на события, происходящие в других объектах."
}